//https://leetcode.com/problems/longest-increasing-path-in-a-matrix/discuss/1514124/dfs-dp-c

//dp+DFS
class Solution {
public:
    int dfs(vector<vector<int>>& mat,int i,int j, vector<vector<int>>& dp){
        if(dp[i][j]>0) return dp[i][j];
        int mx=1;
        if(i-1>=0 && mat[i][j]<mat[i-1][j]){
           
            mx=max(mx,dfs(mat,i-1,j,dp)+1);
        } 
        if(j-1>=0 && mat[i][j]<mat[i][j-1]){
            mx=max(mx,dfs(mat,i,j-1,dp)+1);
        }
        if(i+1<mat.size() && mat[i][j]<mat[i+1][j]){
            mx=max(mx,dfs(mat,i+1,j,dp)+1);
        }
        if(j+1<mat[0].size() && mat[i][j]<mat[i][j+1]){
            mx=max(mx,dfs(mat,i,j+1,dp)+1);
        }
        dp[i][j]=mx;
        return mx;
    }
   
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if (matrix.size() == 0) return 0;
        vector<vector<int>> dp( matrix.size()+1 , vector<int> (matrix[0].size()+1, 0));
        
        int max_length=1;
        for(int i=0;i<matrix.size();i++){
            for(int j=0;j<matrix[i].size();j++){
               
                max_length=max(max_length,dfs(matrix,i,j,dp));
            }
        }
       return max_length; 
    }
};
